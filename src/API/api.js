import { courseDetailsActionCreator, createNoteActionCreator, editStatusActionCreator, myCourseActionCreator, signUpForCourseActionCreator, teachingCourseActionCreator } from "../reducers/course-reducer";
import { createCourseActionCreator, listOfGroupCoursesActionCreator, listOfGroupsActionCreator } from "../reducers/group-reducer";
import { loginActionCreator, logoutActionCreator, profileActionCreator, roleActionCreator, teachersActionCreator } from "../reducers/user-reducer";
import swal from 'sweetalert';

const login = (body) => {

    return dispatch => fetch('https://camp-courses.api.kreosoft.space/login', {
        method: "POST",
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            swal({
                text: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
                timer: 1500
            });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏')
        }
        return response.json();
    });
}

const registr = (body) => {
    return dispatch => fetch('https://camp-courses.api.kreosoft.space/registration', {
        method: "POST",
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            if (response.status === 409) {
                swal("–î–∞–Ω–Ω—ã–π email —É–∂–µ –∑–∞–Ω—è—Ç ‚õî");
            }
            else {
                swal({
                    text: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                    timer: 3000
                });
            }
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        }
        return response.json();
    });
    // .then(data => {
    //     localStorage.setItem("token", data.token);
    //     dispatch(loginActionCreator());
    // }).catch(error => console.log(error))
}

const profile = () => {
    return dispatch => fetch('https://camp-courses.api.kreosoft.space/profile', {
        method: "GET",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        }
    }).then(response => {
        if (!response.ok) {
            if (response.status === 401) {
                localStorage.removeItem("token");
            }
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
        }
        return response.json();
    }).then(data => {
        dispatch(profileActionCreator(data));
    }).catch(error => console.log(error))
}

const editProfile = (body) => {
    return dispatch => fetch('https://camp-courses.api.kreosoft.space/profile', {
        method: "PUT",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
        }
        return response.json();
    }).then(data => {
        dispatch(profileActionCreator(data));
    }).catch(error => console.log(error))
}

const logout = () => {
    return dispatch => fetch('https://camp-courses.api.kreosoft.space/logout', {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        }
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏')
        }
        return response.json();
    }).then(data => {
        localStorage.removeItem("token");
        dispatch(logoutActionCreator());
    }).catch(error => console.log(error))
}

const role = () => {
    return dispatch => fetch('https://camp-courses.api.kreosoft.space/roles', {
        method: "GET",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        }
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å')
        }
        return response.json();
    }).then(data => {
        dispatch(roleActionCreator(data));
    }).catch(error => console.log(error))
}

const teachers = () => {
    return dispatch => fetch('https://camp-courses.api.kreosoft.space/users', {
        method: "GET",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        }
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        }
        return response.json();
    }).then(data => {
        //console.log("–¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–∏ –∫—É—Ä—Å—ã", data)
        dispatch(teachersActionCreator(data));
    }).catch(error => console.log(error))
}

export const userAPI = {
    login: login,
    profile: profile,
    logout: logout,
    editProfile: editProfile,
    registr: registr,
    role: role,
    teachers: teachers
}

/////////group

const listOfGroups = () => {
    return dispatch => fetch('https://camp-courses.api.kreosoft.space/groups', {
        method: "GET",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        }
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã')
        }
        return response.json();
    }).then(data => {
        //console.log("tttt", data)
        dispatch(listOfGroupsActionCreator(data));
    }).catch(error => console.log(error))
}

const createGroup = (body) => {
    return dispatch => fetch('https://camp-courses.api.kreosoft.space/groups', {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            swal({
                text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É :(",
                timer: 3000
            });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É')
        }
        return response.json();
    }).then(data => {
        console.log("—É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã");
        swal({
            text: "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!!! üíñ",
            timer: 1500
        });
        //dispatch(loginActionCreator());
    }).catch(error => console.log(error))
}

const editGroup = (body, id) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/groups/${id}`, {
        method: "PUT",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            swal({
                text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É ü•∫",
                timer: 3000
            });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É')
        }
        return response.json();
    }).then(data => {
        console.log("—É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã");
        swal({
            text: "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞!!! (‚ùÄ‚ùõ ÷ä ‚ùõ‚Äû)‚ô°",
            timer: 1500
        });
        //dispatch(loginActionCreator());
    }).catch(error => console.log(error))
}

const deleteGroup = (id) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/groups/${id}`, {
        method: "DELETE",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        }
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É')
        }
        return response.json();
    }).then(data => {
        console.log("—É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã");
    }).catch(error => console.log(error))
}

const listOfGroupCourses = (id, name) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/groups/${id}`, {
        method: "GET",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        }
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≥—Ä—É–ø–ø—ã')
        }
        return response.json();
    }).then(data => {
        // console.log("–¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–∏ –∫—É—Ä—Å—ã", data)
        dispatch(listOfGroupCoursesActionCreator(data, name));
    }).catch(error => console.log(error))
}

export const groupAPI = {
    listOfGroups: listOfGroups,
    createGroup: createGroup,
    deleteGroup: deleteGroup,
    editGroup: editGroup,
    listOfGroupCourses: listOfGroupCourses
}


/////////course

const listOfMyCourses = () => {
    return dispatch => fetch('https://camp-courses.api.kreosoft.space/courses/my', {
        method: "GET",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        }
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–∏ –∫—É—Ä—Å—ã')
        }
        return response.json();
    }).then(data => {
        console.log("–¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–∏ –∫—É—Ä—Å—ã", data)
        dispatch(myCourseActionCreator(data));
    }).catch(error => console.log(error))
}

const listOfTeachingCourses = () => {
    return dispatch => fetch('https://camp-courses.api.kreosoft.space/courses/teaching', {
        method: "GET",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        }
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞–µ–º—ã–µ –∫—É—Ä—Å—ã')
        }
        return response.json();
    }).then(data => {
        //console.log("tttt", data)
        dispatch(teachingCourseActionCreator(data));
    }).catch(error => console.log(error))
}

const courseDetails = (id) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/courses/${id}/details`, {
        method: "GET",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        }
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫—É—Ä—Å–∞')
        }
        return response.json();
    }).then(data => {
        //console.log("–¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–∏ –∫—É—Ä—Å—ã", data)
        dispatch(courseDetailsActionCreator(data));
    }).catch(error => console.log(error))
}

const editStatus = (body, id) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/courses/${id}/status`, {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            swal({
                text: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å ( ÔΩ° ‚Ä¢ ·¥ñ ‚Ä¢ ÔΩ°)",
                timer: 1000
            });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å')
        }
        return response.json();
    }).then(data => {
        //console.log("—É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã");
        dispatch(editStatusActionCreator(body.status));
    }).catch(error => console.log(error))
}

const signUpForCourse = (id, body) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/courses/${id}/sign-up`, {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            swal({
                text: "–í–µ—Ä–æ—è—Ç–Ω–æ –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å ‚Ä¢·¥ó‚Ä¢",
                timer: 3000
            });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å')
        }
        //return response.json();
    }).then(data => {
        console.log("—É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫—É—Ä—Å");
        swal({
            text: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ üéâüéâüéâ",
            timer: 1500
        });
        dispatch(signUpForCourseActionCreator());
    }).catch(error => console.log(error))
}

const createCourse = (id, body) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/groups/${id}`, {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            swal({
                text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å <(Íê¶„Öç _„Öç)>",
                timer: 3000
            });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å');
        }
        return response.json();
    }).then(data => {
        console.log("—É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∫—É—Ä—Å");
        swal({
            text: "–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (‡∑ÜÀô·µïÀô‡∑Ü)‚ô°",
            timer: 1500
        });
        dispatch(listOfGroupCoursesActionCreator(data));
    }).catch(error => console.log(error))
}

const editCourse = (id, body) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/courses/${id}`, {
        method: "PUT",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            swal({
                text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å (¬∑‚Ä¢·∑Ñ‚à©‚Ä¢·∑Ö )",
                timer: 3000
            });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å')
        }
        return response.json();
    }).then(data => {
        console.log("—É—Å–ø–µ—à–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∫—É—Ä—Å");
        swal({
            text: "–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω ‚ô°",
            timer: 1000
        });
        dispatch(courseDetailsActionCreator(data));
    }).catch(error => console.log(error))
}

const editRequirementsAndAnnotations = (id, body) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/courses/${id}/requirements-and-annotations`, {
        method: "PUT",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            swal({
                text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å (¬∑‚Ä¢·∑Ñ‚à©‚Ä¢·∑Ö )",
                timer: 3000
            });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å(—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è  –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é)')
        }
        return response.json();
    }).then(data => {
        console.log("—É—Å–ø–µ—à–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∫—É—Ä—Å(—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è)");
        swal({
            text: "–£—Å–ø–µ—à–Ω–æ ü•≥",
            timer: 1000
        });
        dispatch(courseDetailsActionCreator(data));
    }).catch(error => console.log(error))
}

const createNote = (id, body) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/courses/${id}/notifications`, {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
        }
        return response.json();
    }).then(data => {
        console.log("—É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
        dispatch(createNoteActionCreator(body));
    }).catch(error => console.log(error))
}

const addTeacher = (id, body) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/courses/${id}/teachers`, {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            swal({
                text: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—è :(",
                timer: 3000
            });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—è')
        }
        return response.json();
    }).then(data => {
        console.log("—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —É—á–∏—Ç–µ–ª—å");
        dispatch(courseDetailsActionCreator(data));
    }).catch(error => console.log(error))
}

const editStudentStatus = (id, studentId, body) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/courses/${id}/student-status/${studentId}`, {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–µ–Ω–∏–∫–∞')
        }
        return response.json();
    }).then(data => {
        console.log("—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å —É—á–µ–Ω–∏–∫–∞");
        dispatch(courseDetailsActionCreator(data));
    }).catch(error => console.log(error))
}

const editMark = (id, studentId, body) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/courses/${id}/marks/${studentId}`, {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify(body)
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∞ —É—á–µ–Ω–∏–∫–∞')
        }
        return response.json();
    }).then(data => {
        console.log("—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ —É—á–µ–Ω–∏–∫–∞");
        dispatch(courseDetailsActionCreator(data));
    }).catch(error => console.log(error))
}

const deleteCourse = (id) => {
    return dispatch => fetch(`https://camp-courses.api.kreosoft.space/courses/${id}`, {
        method: "DELETE",
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.getItem('token')
        }
    }).then(response => {
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å')
        }
        return response.json();
    });
    // .then(data => {
    //     console.log("—É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞");
    //     swal({
    //         text: "–ö—É—Ä—Å —É–¥–∞–ª–µ–Ω (Àö ÀÉÃ£Ã£Ã•‚åìÀÇÃ£Ã£Ã• )„Å•‚ô°",
    //         timer: 3000
    //     });

    // }).catch(error => console.log(error))
}

export const courseAPI = {
    listOfMyCourses: listOfMyCourses,
    listOfTeachingCourses: listOfTeachingCourses,
    courseDetails: courseDetails,
    editStatus: editStatus,
    signUpForCourse: signUpForCourse,
    createCourse: createCourse,
    editCourse: editCourse,
    editRequirementsAndAnnotations: editRequirementsAndAnnotations,
    createNote: createNote,
    addTeacher: addTeacher,
    editStudentStatus: editStudentStatus,
    editMark: editMark,
    deleteCourse: deleteCourse
}